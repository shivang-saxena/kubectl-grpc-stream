// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LiveCommentsClient is the client API for LiveComments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveCommentsClient interface {
	// CreateThread will create new thread of live comments system
	CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*Thread, error)
	// GetThread will Get thread of live comments system
	GetThread(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*Thread, error)
	// CreateComment will create comments on live comments system
	CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error)
	// getComments will stream the comments in real time
	GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (LiveComments_GetCommentsClient, error)
}

type liveCommentsClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveCommentsClient(cc grpc.ClientConnInterface) LiveCommentsClient {
	return &liveCommentsClient{cc}
}

func (c *liveCommentsClient) CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*Thread, error) {
	out := new(Thread)
	err := c.cc.Invoke(ctx, "/main.liveComments/CreateThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveCommentsClient) GetThread(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*Thread, error) {
	out := new(Thread)
	err := c.cc.Invoke(ctx, "/main.liveComments/GetThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveCommentsClient) CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/main.liveComments/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveCommentsClient) GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (LiveComments_GetCommentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &LiveComments_ServiceDesc.Streams[0], "/main.liveComments/GetComments", opts...)
	if err != nil {
		return nil, err
	}
	x := &liveCommentsGetCommentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LiveComments_GetCommentsClient interface {
	Recv() (*Comment, error)
	grpc.ClientStream
}

type liveCommentsGetCommentsClient struct {
	grpc.ClientStream
}

func (x *liveCommentsGetCommentsClient) Recv() (*Comment, error) {
	m := new(Comment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LiveCommentsServer is the server API for LiveComments service.
// All implementations should embed UnimplementedLiveCommentsServer
// for forward compatibility
type LiveCommentsServer interface {
	// CreateThread will create new thread of live comments system
	CreateThread(context.Context, *CreateThreadRequest) (*Thread, error)
	// GetThread will Get thread of live comments system
	GetThread(context.Context, *GetThreadRequest) (*Thread, error)
	// CreateComment will create comments on live comments system
	CreateComment(context.Context, *Comment) (*Comment, error)
	// getComments will stream the comments in real time
	GetComments(*GetCommentsRequest, LiveComments_GetCommentsServer) error
}

// UnimplementedLiveCommentsServer should be embedded to have forward compatible implementations.
type UnimplementedLiveCommentsServer struct {
}

func (UnimplementedLiveCommentsServer) CreateThread(context.Context, *CreateThreadRequest) (*Thread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThread not implemented")
}
func (UnimplementedLiveCommentsServer) GetThread(context.Context, *GetThreadRequest) (*Thread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThread not implemented")
}
func (UnimplementedLiveCommentsServer) CreateComment(context.Context, *Comment) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedLiveCommentsServer) GetComments(*GetCommentsRequest, LiveComments_GetCommentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetComments not implemented")
}

// UnsafeLiveCommentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveCommentsServer will
// result in compilation errors.
type UnsafeLiveCommentsServer interface {
	mustEmbedUnimplementedLiveCommentsServer()
}

func RegisterLiveCommentsServer(s grpc.ServiceRegistrar, srv LiveCommentsServer) {
	s.RegisterService(&LiveComments_ServiceDesc, srv)
}

func _LiveComments_CreateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveCommentsServer).CreateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.liveComments/CreateThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveCommentsServer).CreateThread(ctx, req.(*CreateThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveComments_GetThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveCommentsServer).GetThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.liveComments/GetThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveCommentsServer).GetThread(ctx, req.(*GetThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveComments_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveCommentsServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.liveComments/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveCommentsServer).CreateComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveComments_GetComments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCommentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LiveCommentsServer).GetComments(m, &liveCommentsGetCommentsServer{stream})
}

type LiveComments_GetCommentsServer interface {
	Send(*Comment) error
	grpc.ServerStream
}

type liveCommentsGetCommentsServer struct {
	grpc.ServerStream
}

func (x *liveCommentsGetCommentsServer) Send(m *Comment) error {
	return x.ServerStream.SendMsg(m)
}

// LiveComments_ServiceDesc is the grpc.ServiceDesc for LiveComments service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveComments_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.liveComments",
	HandlerType: (*LiveCommentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateThread",
			Handler:    _LiveComments_CreateThread_Handler,
		},
		{
			MethodName: "GetThread",
			Handler:    _LiveComments_GetThread_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _LiveComments_CreateComment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetComments",
			Handler:       _LiveComments_GetComments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
